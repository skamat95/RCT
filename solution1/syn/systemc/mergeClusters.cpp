// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mergeClusters.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool mergeClusters::ap_const_boolean_1 = true;
const sc_lv<16> mergeClusters::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> mergeClusters::ap_const_lv16_2 = "10";
const sc_logic mergeClusters::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mergeClusters::ap_const_logic_0 = sc_dt::Log_0;

mergeClusters::mergeClusters(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return_0);
    sensitive << ( eta1_write_assign_fu_220_p3 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( phi1_write_assign_fu_172_p3 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( tet1_write_assign_fu_140_p3 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( cet1_write_assign_fu_156_p3 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( eta2_write_assign_fu_188_p3 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( phi2_write_assign_fu_204_p3 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( tet2_write_assign_fu_236_p3 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( cet2_write_assign_fu_252_p3 );

    SC_METHOD(thread_cet1_write_assign_fu_156_p3);
    sensitive << ( icet1 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp5_fu_148_p3 );

    SC_METHOD(thread_cet2_write_assign_fu_252_p3);
    sensitive << ( icet2 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp7_fu_244_p3 );

    SC_METHOD(thread_eta1_write_assign_fu_220_p3);
    sensitive << ( ieta1 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp4_fu_212_p3 );

    SC_METHOD(thread_eta2_write_assign_fu_188_p3);
    sensitive << ( ieta2 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp2_fu_180_p3 );

    SC_METHOD(thread_or_cond_fu_84_p2);
    sensitive << ( tmp_fu_72_p2 );
    sensitive << ( tmp_1_fu_78_p2 );

    SC_METHOD(thread_phi1_write_assign_fu_172_p3);
    sensitive << ( iphi1 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp9_fu_164_p3 );

    SC_METHOD(thread_phi2_write_assign_fu_204_p3);
    sensitive << ( iphi2 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp3_fu_196_p3 );

    SC_METHOD(thread_sel_tmp1_fu_132_p3);
    sensitive << ( sel_tmp_fu_126_p2 );
    sensitive << ( tmp_4_fu_102_p2 );
    sensitive << ( tmp_8_fu_120_p2 );

    SC_METHOD(thread_sel_tmp2_fu_180_p3);
    sensitive << ( ieta2 );
    sensitive << ( sel_tmp_fu_126_p2 );

    SC_METHOD(thread_sel_tmp3_fu_196_p3);
    sensitive << ( iphi2 );
    sensitive << ( sel_tmp_fu_126_p2 );

    SC_METHOD(thread_sel_tmp4_fu_212_p3);
    sensitive << ( ieta1 );
    sensitive << ( sel_tmp_fu_126_p2 );

    SC_METHOD(thread_sel_tmp5_fu_148_p3);
    sensitive << ( sel_tmp_fu_126_p2 );
    sensitive << ( tmp_3_fu_96_p2 );

    SC_METHOD(thread_sel_tmp6_fu_228_p3);
    sensitive << ( sel_tmp_fu_126_p2 );
    sensitive << ( tmp_5_fu_108_p2 );
    sensitive << ( tmp_7_fu_114_p2 );

    SC_METHOD(thread_sel_tmp7_fu_244_p3);
    sensitive << ( sel_tmp_fu_126_p2 );
    sensitive << ( tmp_3_fu_96_p2 );

    SC_METHOD(thread_sel_tmp9_fu_164_p3);
    sensitive << ( iphi1 );
    sensitive << ( sel_tmp_fu_126_p2 );

    SC_METHOD(thread_sel_tmp_fu_126_p2);
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( tmp_2_fu_90_p2 );

    SC_METHOD(thread_tet1_write_assign_fu_140_p3);
    sensitive << ( itet1 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp1_fu_132_p3 );

    SC_METHOD(thread_tet2_write_assign_fu_236_p3);
    sensitive << ( itet2 );
    sensitive << ( or_cond_fu_84_p2 );
    sensitive << ( sel_tmp6_fu_228_p3 );

    SC_METHOD(thread_tmp_1_fu_78_p2);
    sensitive << ( iphi1 );
    sensitive << ( iphi2 );

    SC_METHOD(thread_tmp_2_fu_90_p2);
    sensitive << ( icet1 );
    sensitive << ( icet2 );

    SC_METHOD(thread_tmp_3_fu_96_p2);
    sensitive << ( icet1 );
    sensitive << ( icet2 );

    SC_METHOD(thread_tmp_4_fu_102_p2);
    sensitive << ( itet1 );
    sensitive << ( icet2 );

    SC_METHOD(thread_tmp_5_fu_108_p2);
    sensitive << ( itet2 );
    sensitive << ( icet2 );

    SC_METHOD(thread_tmp_7_fu_114_p2);
    sensitive << ( icet1 );
    sensitive << ( itet2 );

    SC_METHOD(thread_tmp_8_fu_120_p2);
    sensitive << ( itet1 );
    sensitive << ( icet1 );

    SC_METHOD(thread_tmp_fu_72_p2);
    sensitive << ( ieta1 );
    sensitive << ( ieta2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mergeClusters_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ieta1, "(port)ieta1");
    sc_trace(mVcdFile, iphi1, "(port)iphi1");
    sc_trace(mVcdFile, itet1, "(port)itet1");
    sc_trace(mVcdFile, icet1, "(port)icet1");
    sc_trace(mVcdFile, ieta2, "(port)ieta2");
    sc_trace(mVcdFile, iphi2, "(port)iphi2");
    sc_trace(mVcdFile, itet2, "(port)itet2");
    sc_trace(mVcdFile, icet2, "(port)icet2");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_72_p2, "tmp_fu_72_p2");
    sc_trace(mVcdFile, tmp_1_fu_78_p2, "tmp_1_fu_78_p2");
    sc_trace(mVcdFile, or_cond_fu_84_p2, "or_cond_fu_84_p2");
    sc_trace(mVcdFile, tmp_2_fu_90_p2, "tmp_2_fu_90_p2");
    sc_trace(mVcdFile, sel_tmp_fu_126_p2, "sel_tmp_fu_126_p2");
    sc_trace(mVcdFile, tmp_4_fu_102_p2, "tmp_4_fu_102_p2");
    sc_trace(mVcdFile, tmp_8_fu_120_p2, "tmp_8_fu_120_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_132_p3, "sel_tmp1_fu_132_p3");
    sc_trace(mVcdFile, tmp_3_fu_96_p2, "tmp_3_fu_96_p2");
    sc_trace(mVcdFile, sel_tmp5_fu_148_p3, "sel_tmp5_fu_148_p3");
    sc_trace(mVcdFile, sel_tmp9_fu_164_p3, "sel_tmp9_fu_164_p3");
    sc_trace(mVcdFile, sel_tmp2_fu_180_p3, "sel_tmp2_fu_180_p3");
    sc_trace(mVcdFile, sel_tmp3_fu_196_p3, "sel_tmp3_fu_196_p3");
    sc_trace(mVcdFile, sel_tmp4_fu_212_p3, "sel_tmp4_fu_212_p3");
    sc_trace(mVcdFile, tmp_5_fu_108_p2, "tmp_5_fu_108_p2");
    sc_trace(mVcdFile, tmp_7_fu_114_p2, "tmp_7_fu_114_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_228_p3, "sel_tmp6_fu_228_p3");
    sc_trace(mVcdFile, sel_tmp7_fu_244_p3, "sel_tmp7_fu_244_p3");
    sc_trace(mVcdFile, eta1_write_assign_fu_220_p3, "eta1_write_assign_fu_220_p3");
    sc_trace(mVcdFile, phi1_write_assign_fu_172_p3, "phi1_write_assign_fu_172_p3");
    sc_trace(mVcdFile, tet1_write_assign_fu_140_p3, "tet1_write_assign_fu_140_p3");
    sc_trace(mVcdFile, cet1_write_assign_fu_156_p3, "cet1_write_assign_fu_156_p3");
    sc_trace(mVcdFile, eta2_write_assign_fu_188_p3, "eta2_write_assign_fu_188_p3");
    sc_trace(mVcdFile, phi2_write_assign_fu_204_p3, "phi2_write_assign_fu_204_p3");
    sc_trace(mVcdFile, tet2_write_assign_fu_236_p3, "tet2_write_assign_fu_236_p3");
    sc_trace(mVcdFile, cet2_write_assign_fu_252_p3, "cet2_write_assign_fu_252_p3");
#endif

    }
}

mergeClusters::~mergeClusters() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mergeClusters::thread_ap_return_0() {
    ap_return_0 = eta1_write_assign_fu_220_p3.read();
}

void mergeClusters::thread_ap_return_1() {
    ap_return_1 = phi1_write_assign_fu_172_p3.read();
}

void mergeClusters::thread_ap_return_2() {
    ap_return_2 = tet1_write_assign_fu_140_p3.read();
}

void mergeClusters::thread_ap_return_3() {
    ap_return_3 = cet1_write_assign_fu_156_p3.read();
}

void mergeClusters::thread_ap_return_4() {
    ap_return_4 = eta2_write_assign_fu_188_p3.read();
}

void mergeClusters::thread_ap_return_5() {
    ap_return_5 = phi2_write_assign_fu_204_p3.read();
}

void mergeClusters::thread_ap_return_6() {
    ap_return_6 = tet2_write_assign_fu_236_p3.read();
}

void mergeClusters::thread_ap_return_7() {
    ap_return_7 = cet2_write_assign_fu_252_p3.read();
}

void mergeClusters::thread_cet1_write_assign_fu_156_p3() {
    cet1_write_assign_fu_156_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp5_fu_148_p3.read(): icet1.read());
}

void mergeClusters::thread_cet2_write_assign_fu_252_p3() {
    cet2_write_assign_fu_252_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp7_fu_244_p3.read(): icet2.read());
}

void mergeClusters::thread_eta1_write_assign_fu_220_p3() {
    eta1_write_assign_fu_220_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp4_fu_212_p3.read(): ieta1.read());
}

void mergeClusters::thread_eta2_write_assign_fu_188_p3() {
    eta2_write_assign_fu_188_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp2_fu_180_p3.read(): ieta2.read());
}

void mergeClusters::thread_or_cond_fu_84_p2() {
    or_cond_fu_84_p2 = (tmp_fu_72_p2.read() | tmp_1_fu_78_p2.read());
}

void mergeClusters::thread_phi1_write_assign_fu_172_p3() {
    phi1_write_assign_fu_172_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp9_fu_164_p3.read(): iphi1.read());
}

void mergeClusters::thread_phi2_write_assign_fu_204_p3() {
    phi2_write_assign_fu_204_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp3_fu_196_p3.read(): iphi2.read());
}

void mergeClusters::thread_sel_tmp1_fu_132_p3() {
    sel_tmp1_fu_132_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? tmp_4_fu_102_p2.read(): tmp_8_fu_120_p2.read());
}

void mergeClusters::thread_sel_tmp2_fu_180_p3() {
    sel_tmp2_fu_180_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? ap_const_lv16_2: ieta2.read());
}

void mergeClusters::thread_sel_tmp3_fu_196_p3() {
    sel_tmp3_fu_196_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? ap_const_lv16_2: iphi2.read());
}

void mergeClusters::thread_sel_tmp4_fu_212_p3() {
    sel_tmp4_fu_212_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? ieta1.read(): ap_const_lv16_2);
}

void mergeClusters::thread_sel_tmp5_fu_148_p3() {
    sel_tmp5_fu_148_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? tmp_3_fu_96_p2.read(): ap_const_lv16_0);
}

void mergeClusters::thread_sel_tmp6_fu_228_p3() {
    sel_tmp6_fu_228_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? tmp_5_fu_108_p2.read(): tmp_7_fu_114_p2.read());
}

void mergeClusters::thread_sel_tmp7_fu_244_p3() {
    sel_tmp7_fu_244_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? ap_const_lv16_0: tmp_3_fu_96_p2.read());
}

void mergeClusters::thread_sel_tmp9_fu_164_p3() {
    sel_tmp9_fu_164_p3 = (!sel_tmp_fu_126_p2.read()[0].is_01())? sc_lv<16>(): ((sel_tmp_fu_126_p2.read()[0].to_bool())? iphi1.read(): ap_const_lv16_2);
}

void mergeClusters::thread_sel_tmp_fu_126_p2() {
    sel_tmp_fu_126_p2 = (or_cond_fu_84_p2.read() & tmp_2_fu_90_p2.read());
}

void mergeClusters::thread_tet1_write_assign_fu_140_p3() {
    tet1_write_assign_fu_140_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp1_fu_132_p3.read(): itet1.read());
}

void mergeClusters::thread_tet2_write_assign_fu_236_p3() {
    tet2_write_assign_fu_236_p3 = (!or_cond_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond_fu_84_p2.read()[0].to_bool())? sel_tmp6_fu_228_p3.read(): itet2.read());
}

void mergeClusters::thread_tmp_1_fu_78_p2() {
    tmp_1_fu_78_p2 = (!iphi1.read().is_01() || !iphi2.read().is_01())? sc_lv<1>(): sc_lv<1>(iphi1.read() == iphi2.read());
}

void mergeClusters::thread_tmp_2_fu_90_p2() {
    tmp_2_fu_90_p2 = (!icet1.read().is_01() || !icet2.read().is_01())? sc_lv<1>(): (sc_biguint<16>(icet1.read()) > sc_biguint<16>(icet2.read()));
}

void mergeClusters::thread_tmp_3_fu_96_p2() {
    tmp_3_fu_96_p2 = (!icet2.read().is_01() || !icet1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(icet2.read()) + sc_biguint<16>(icet1.read()));
}

void mergeClusters::thread_tmp_4_fu_102_p2() {
    tmp_4_fu_102_p2 = (!icet2.read().is_01() || !itet1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(icet2.read()) + sc_biguint<16>(itet1.read()));
}

void mergeClusters::thread_tmp_5_fu_108_p2() {
    tmp_5_fu_108_p2 = (!itet2.read().is_01() || !icet2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(itet2.read()) - sc_biguint<16>(icet2.read()));
}

void mergeClusters::thread_tmp_7_fu_114_p2() {
    tmp_7_fu_114_p2 = (!itet2.read().is_01() || !icet1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(itet2.read()) + sc_biguint<16>(icet1.read()));
}

void mergeClusters::thread_tmp_8_fu_120_p2() {
    tmp_8_fu_120_p2 = (!itet1.read().is_01() || !icet1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(itet1.read()) - sc_biguint<16>(icet1.read()));
}

void mergeClusters::thread_tmp_fu_72_p2() {
    tmp_fu_72_p2 = (!ieta1.read().is_01() || !ieta2.read().is_01())? sc_lv<1>(): sc_lv<1>(ieta1.read() == ieta2.read());
}

}

