// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getPeakBinOf5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getPeakBinOf5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getPeakBinOf5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> getPeakBinOf5::ap_ST_fsm_state1 = "1";
const sc_lv<4> getPeakBinOf5::ap_ST_fsm_state2 = "10";
const sc_lv<4> getPeakBinOf5::ap_ST_fsm_state3 = "100";
const sc_lv<4> getPeakBinOf5::ap_ST_fsm_state4 = "1000";
const sc_lv<32> getPeakBinOf5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> getPeakBinOf5::ap_const_lv1_1 = "1";
const sc_lv<32> getPeakBinOf5::ap_const_lv32_1 = "1";
const sc_lv<32> getPeakBinOf5::ap_const_lv32_2 = "10";
const sc_lv<32> getPeakBinOf5::ap_const_lv32_F = "1111";
const sc_lv<16> getPeakBinOf5::ap_const_lv16_1 = "1";
const sc_lv<2> getPeakBinOf5::ap_const_lv2_0 = "00";
const sc_lv<1> getPeakBinOf5::ap_const_lv1_0 = "0";
const sc_lv<32> getPeakBinOf5::ap_const_lv32_3 = "11";
const sc_lv<3> getPeakBinOf5::ap_const_lv3_4 = "100";
const sc_lv<3> getPeakBinOf5::ap_const_lv3_3 = "11";
const sc_lv<3> getPeakBinOf5::ap_const_lv3_2 = "10";
const sc_lv<3> getPeakBinOf5::ap_const_lv3_0 = "000";
const sc_lv<3> getPeakBinOf5::ap_const_lv3_1 = "1";

getPeakBinOf5::getPeakBinOf5(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sel_tmp6_fu_320_p2 );
    sensitive << ( sel_tmp4_fu_306_p3 );

    SC_METHOD(thread_iAve_fu_278_p3);
    sensitive << ( tmp_15_fu_272_p2 );

    SC_METHOD(thread_iEtSum_fu_218_p2);
    sensitive << ( tmp_6_reg_354 );
    sensitive << ( tmp3_fu_212_p2 );

    SC_METHOD(thread_sel_tmp1_fu_292_p2);
    sensitive << ( tmp4_fu_286_p2 );
    sensitive << ( tmp_7_fu_245_p2 );

    SC_METHOD(thread_sel_tmp2_fu_298_p3);
    sensitive << ( sel_tmp1_fu_292_p2 );
    sensitive << ( iAve_fu_278_p3 );

    SC_METHOD(thread_sel_tmp4_fu_306_p3);
    sensitive << ( tmp_7_fu_245_p2 );
    sensitive << ( sel_tmp2_fu_298_p3 );

    SC_METHOD(thread_sel_tmp5_fu_314_p2);
    sensitive << ( tmp_11_fu_255_p2 );

    SC_METHOD(thread_sel_tmp6_fu_320_p2);
    sensitive << ( tmp_7_fu_245_p2 );
    sensitive << ( sel_tmp5_fu_314_p2 );

    SC_METHOD(thread_tmp1_fu_202_p3);
    sensitive << ( tmp5_reg_344 );

    SC_METHOD(thread_tmp2_fu_142_p2);
    sensitive << ( tmp_fu_130_p2 );
    sensitive << ( tmp_16_fu_126_p1 );

    SC_METHOD(thread_tmp3_fu_212_p2);
    sensitive << ( tmp1_fu_202_p3 );
    sensitive << ( tmp_20_fu_209_p1 );

    SC_METHOD(thread_tmp4_fu_286_p2);
    sensitive << ( tmp_11_fu_255_p2 );
    sensitive << ( tmp_13_fu_260_p2 );

    SC_METHOD(thread_tmp5_fu_176_p2);
    sensitive << ( tmp_19_fu_172_p1 );
    sensitive << ( tmp_18_fu_168_p1 );

    SC_METHOD(thread_tmp8_fu_136_p2);
    sensitive << ( et_1_read );
    sensitive << ( tmp_2_fu_98_p1 );

    SC_METHOD(thread_tmp9_fu_148_p2);
    sensitive << ( tmp_5_fu_112_p1 );
    sensitive << ( tmp2_fu_142_p2 );

    SC_METHOD(thread_tmp_10_fu_227_p3);
    sensitive << ( ap_port_reg_etSum );

    SC_METHOD(thread_tmp_11_fu_255_p2);
    sensitive << ( tmp_10_reg_372 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_13_cast_fu_252_p1 );

    SC_METHOD(thread_tmp_12_fu_239_p2);
    sensitive << ( tmp_14_cast1_fu_223_p1 );
    sensitive << ( tmp_15_cast_fu_235_p1 );

    SC_METHOD(thread_tmp_13_cast1_fu_249_p1);
    sensitive << ( iEtSum_reg_365 );

    SC_METHOD(thread_tmp_13_cast_fu_252_p1);
    sensitive << ( iEtSum_reg_365 );

    SC_METHOD(thread_tmp_13_fu_260_p2);
    sensitive << ( tmp_12_reg_377 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_13_cast1_fu_249_p1 );

    SC_METHOD(thread_tmp_14_cast1_fu_223_p1);
    sensitive << ( ap_port_reg_etSum );

    SC_METHOD(thread_tmp_14_fu_265_p3);
    sensitive << ( etSum_read_reg_359 );

    SC_METHOD(thread_tmp_15_cast_fu_235_p1);
    sensitive << ( tmp_10_fu_227_p3 );

    SC_METHOD(thread_tmp_15_fu_272_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_13_cast1_fu_249_p1 );
    sensitive << ( tmp_14_fu_265_p3 );

    SC_METHOD(thread_tmp_16_fu_126_p1);
    sensitive << ( tmp_1_fu_116_p4 );

    SC_METHOD(thread_tmp_17_fu_164_p1);
    sensitive << ( tmp_3_fu_154_p4 );

    SC_METHOD(thread_tmp_18_fu_168_p1);
    sensitive << ( ap_port_reg_et_3_read );

    SC_METHOD(thread_tmp_19_fu_172_p1);
    sensitive << ( ap_port_reg_et_4_read );

    SC_METHOD(thread_tmp_1_fu_116_p4);
    sensitive << ( et_2_read );

    SC_METHOD(thread_tmp_20_fu_209_p1);
    sensitive << ( tmp_4_reg_349 );

    SC_METHOD(thread_tmp_2_fu_98_p1);
    sensitive << ( tmp_9_fu_88_p4 );

    SC_METHOD(thread_tmp_3_fu_154_p4);
    sensitive << ( ap_port_reg_et_3_read );

    SC_METHOD(thread_tmp_5_fu_112_p1);
    sensitive << ( tmp_s_fu_102_p4 );

    SC_METHOD(thread_tmp_6_fu_196_p2);
    sensitive << ( tmp_8_fu_192_p2 );
    sensitive << ( tmp_17_fu_164_p1 );

    SC_METHOD(thread_tmp_7_fu_245_p2);
    sensitive << ( etSum_read_reg_359 );
    sensitive << ( iEtSum_reg_365 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_8_fu_192_p2);
    sensitive << ( tmp8_reg_334 );
    sensitive << ( tmp9_reg_339 );

    SC_METHOD(thread_tmp_9_fu_88_p4);
    sensitive << ( et_0_read );

    SC_METHOD(thread_tmp_fu_130_p2);
    sensitive << ( et_2_read );

    SC_METHOD(thread_tmp_s_fu_102_p4);
    sensitive << ( et_1_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getPeakBinOf5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, et_0_read, "(port)et_0_read");
    sc_trace(mVcdFile, et_1_read, "(port)et_1_read");
    sc_trace(mVcdFile, et_2_read, "(port)et_2_read");
    sc_trace(mVcdFile, et_3_read, "(port)et_3_read");
    sc_trace(mVcdFile, et_4_read, "(port)et_4_read");
    sc_trace(mVcdFile, etSum, "(port)etSum");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp8_fu_136_p2, "tmp8_fu_136_p2");
    sc_trace(mVcdFile, tmp8_reg_334, "tmp8_reg_334");
    sc_trace(mVcdFile, tmp9_fu_148_p2, "tmp9_fu_148_p2");
    sc_trace(mVcdFile, tmp9_reg_339, "tmp9_reg_339");
    sc_trace(mVcdFile, tmp5_fu_176_p2, "tmp5_fu_176_p2");
    sc_trace(mVcdFile, tmp5_reg_344, "tmp5_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_4_reg_349, "tmp_4_reg_349");
    sc_trace(mVcdFile, tmp_6_fu_196_p2, "tmp_6_fu_196_p2");
    sc_trace(mVcdFile, tmp_6_reg_354, "tmp_6_reg_354");
    sc_trace(mVcdFile, etSum_read_reg_359, "etSum_read_reg_359");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, iEtSum_fu_218_p2, "iEtSum_fu_218_p2");
    sc_trace(mVcdFile, iEtSum_reg_365, "iEtSum_reg_365");
    sc_trace(mVcdFile, tmp_10_fu_227_p3, "tmp_10_fu_227_p3");
    sc_trace(mVcdFile, tmp_10_reg_372, "tmp_10_reg_372");
    sc_trace(mVcdFile, tmp_12_fu_239_p2, "tmp_12_fu_239_p2");
    sc_trace(mVcdFile, tmp_12_reg_377, "tmp_12_reg_377");
    sc_trace(mVcdFile, ap_port_reg_et_3_read, "ap_port_reg_et_3_read");
    sc_trace(mVcdFile, ap_port_reg_et_4_read, "ap_port_reg_et_4_read");
    sc_trace(mVcdFile, ap_port_reg_etSum, "ap_port_reg_etSum");
    sc_trace(mVcdFile, tmp_9_fu_88_p4, "tmp_9_fu_88_p4");
    sc_trace(mVcdFile, tmp_s_fu_102_p4, "tmp_s_fu_102_p4");
    sc_trace(mVcdFile, tmp_1_fu_116_p4, "tmp_1_fu_116_p4");
    sc_trace(mVcdFile, tmp_2_fu_98_p1, "tmp_2_fu_98_p1");
    sc_trace(mVcdFile, tmp_fu_130_p2, "tmp_fu_130_p2");
    sc_trace(mVcdFile, tmp_16_fu_126_p1, "tmp_16_fu_126_p1");
    sc_trace(mVcdFile, tmp_5_fu_112_p1, "tmp_5_fu_112_p1");
    sc_trace(mVcdFile, tmp2_fu_142_p2, "tmp2_fu_142_p2");
    sc_trace(mVcdFile, tmp_3_fu_154_p4, "tmp_3_fu_154_p4");
    sc_trace(mVcdFile, tmp_19_fu_172_p1, "tmp_19_fu_172_p1");
    sc_trace(mVcdFile, tmp_18_fu_168_p1, "tmp_18_fu_168_p1");
    sc_trace(mVcdFile, tmp_8_fu_192_p2, "tmp_8_fu_192_p2");
    sc_trace(mVcdFile, tmp_17_fu_164_p1, "tmp_17_fu_164_p1");
    sc_trace(mVcdFile, tmp1_fu_202_p3, "tmp1_fu_202_p3");
    sc_trace(mVcdFile, tmp_20_fu_209_p1, "tmp_20_fu_209_p1");
    sc_trace(mVcdFile, tmp3_fu_212_p2, "tmp3_fu_212_p2");
    sc_trace(mVcdFile, tmp_14_cast1_fu_223_p1, "tmp_14_cast1_fu_223_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_235_p1, "tmp_15_cast_fu_235_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_13_cast_fu_252_p1, "tmp_13_cast_fu_252_p1");
    sc_trace(mVcdFile, tmp_13_cast1_fu_249_p1, "tmp_13_cast1_fu_249_p1");
    sc_trace(mVcdFile, tmp_14_fu_265_p3, "tmp_14_fu_265_p3");
    sc_trace(mVcdFile, tmp_15_fu_272_p2, "tmp_15_fu_272_p2");
    sc_trace(mVcdFile, tmp_11_fu_255_p2, "tmp_11_fu_255_p2");
    sc_trace(mVcdFile, tmp_13_fu_260_p2, "tmp_13_fu_260_p2");
    sc_trace(mVcdFile, tmp4_fu_286_p2, "tmp4_fu_286_p2");
    sc_trace(mVcdFile, tmp_7_fu_245_p2, "tmp_7_fu_245_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_292_p2, "sel_tmp1_fu_292_p2");
    sc_trace(mVcdFile, iAve_fu_278_p3, "iAve_fu_278_p3");
    sc_trace(mVcdFile, sel_tmp2_fu_298_p3, "sel_tmp2_fu_298_p3");
    sc_trace(mVcdFile, sel_tmp5_fu_314_p2, "sel_tmp5_fu_314_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_320_p2, "sel_tmp6_fu_320_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_306_p3, "sel_tmp4_fu_306_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

getPeakBinOf5::~getPeakBinOf5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getPeakBinOf5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_port_reg_etSum = etSum.read();
        ap_port_reg_et_3_read = et_3_read.read();
        ap_port_reg_et_4_read = et_4_read.read();
        tmp8_reg_334 = tmp8_fu_136_p2.read();
        tmp9_reg_339 = tmp9_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        etSum_read_reg_359 = ap_port_reg_etSum.read();
        iEtSum_reg_365 = iEtSum_fu_218_p2.read();
        tmp_10_reg_372 = tmp_10_fu_227_p3.read();
        tmp_12_reg_377 = tmp_12_fu_239_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        tmp5_reg_344 = tmp5_fu_176_p2.read();
        tmp_4_reg_349 = ap_port_reg_et_4_read.read().range(15, 1);
        tmp_6_reg_354 = tmp_6_fu_196_p2.read();
    }
}

void getPeakBinOf5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void getPeakBinOf5::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void getPeakBinOf5::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void getPeakBinOf5::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void getPeakBinOf5::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getPeakBinOf5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getPeakBinOf5::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getPeakBinOf5::thread_ap_return() {
    ap_return = (!sel_tmp6_fu_320_p2.read()[0].is_01())? sc_lv<3>(): ((sel_tmp6_fu_320_p2.read()[0].to_bool())? ap_const_lv3_1: sel_tmp4_fu_306_p3.read());
}

void getPeakBinOf5::thread_iAve_fu_278_p3() {
    iAve_fu_278_p3 = (!tmp_15_fu_272_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_15_fu_272_p2.read()[0].to_bool())? ap_const_lv3_4: ap_const_lv3_3);
}

void getPeakBinOf5::thread_iEtSum_fu_218_p2() {
    iEtSum_fu_218_p2 = (!tmp_6_reg_354.read().is_01() || !tmp3_fu_212_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_6_reg_354.read()) + sc_biguint<16>(tmp3_fu_212_p2.read()));
}

void getPeakBinOf5::thread_sel_tmp1_fu_292_p2() {
    sel_tmp1_fu_292_p2 = (tmp4_fu_286_p2.read() & tmp_7_fu_245_p2.read());
}

void getPeakBinOf5::thread_sel_tmp2_fu_298_p3() {
    sel_tmp2_fu_298_p3 = (!sel_tmp1_fu_292_p2.read()[0].is_01())? sc_lv<3>(): ((sel_tmp1_fu_292_p2.read()[0].to_bool())? iAve_fu_278_p3.read(): ap_const_lv3_2);
}

void getPeakBinOf5::thread_sel_tmp4_fu_306_p3() {
    sel_tmp4_fu_306_p3 = (!tmp_7_fu_245_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_7_fu_245_p2.read()[0].to_bool())? sel_tmp2_fu_298_p3.read(): ap_const_lv3_0);
}

void getPeakBinOf5::thread_sel_tmp5_fu_314_p2() {
    sel_tmp5_fu_314_p2 = (tmp_11_fu_255_p2.read() ^ ap_const_lv1_1);
}

void getPeakBinOf5::thread_sel_tmp6_fu_320_p2() {
    sel_tmp6_fu_320_p2 = (tmp_7_fu_245_p2.read() & sel_tmp5_fu_314_p2.read());
}

void getPeakBinOf5::thread_tmp1_fu_202_p3() {
    tmp1_fu_202_p3 = esl_concat<14,2>(tmp5_reg_344.read(), ap_const_lv2_0);
}

void getPeakBinOf5::thread_tmp2_fu_142_p2() {
    tmp2_fu_142_p2 = (!tmp_fu_130_p2.read().is_01() || !tmp_16_fu_126_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_fu_130_p2.read()) + sc_biguint<16>(tmp_16_fu_126_p1.read()));
}

void getPeakBinOf5::thread_tmp3_fu_212_p2() {
    tmp3_fu_212_p2 = (!tmp1_fu_202_p3.read().is_01() || !tmp_20_fu_209_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp1_fu_202_p3.read()) + sc_biguint<16>(tmp_20_fu_209_p1.read()));
}

void getPeakBinOf5::thread_tmp4_fu_286_p2() {
    tmp4_fu_286_p2 = (tmp_11_fu_255_p2.read() & tmp_13_fu_260_p2.read());
}

void getPeakBinOf5::thread_tmp5_fu_176_p2() {
    tmp5_fu_176_p2 = (!tmp_19_fu_172_p1.read().is_01() || !tmp_18_fu_168_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_19_fu_172_p1.read()) + sc_biguint<14>(tmp_18_fu_168_p1.read()));
}

void getPeakBinOf5::thread_tmp8_fu_136_p2() {
    tmp8_fu_136_p2 = (!tmp_2_fu_98_p1.read().is_01() || !et_1_read.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_2_fu_98_p1.read()) + sc_biguint<16>(et_1_read.read()));
}

void getPeakBinOf5::thread_tmp9_fu_148_p2() {
    tmp9_fu_148_p2 = (!tmp_5_fu_112_p1.read().is_01() || !tmp2_fu_142_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_5_fu_112_p1.read()) + sc_biguint<16>(tmp2_fu_142_p2.read()));
}

void getPeakBinOf5::thread_tmp_10_fu_227_p3() {
    tmp_10_fu_227_p3 = esl_concat<16,1>(ap_port_reg_etSum.read(), ap_const_lv1_0);
}

void getPeakBinOf5::thread_tmp_11_fu_255_p2() {
    tmp_11_fu_255_p2 = (!tmp_13_cast_fu_252_p1.read().is_01() || !tmp_10_reg_372.read().is_01())? sc_lv<1>(): (sc_biguint<17>(tmp_13_cast_fu_252_p1.read()) > sc_biguint<17>(tmp_10_reg_372.read()));
}

void getPeakBinOf5::thread_tmp_12_fu_239_p2() {
    tmp_12_fu_239_p2 = (!tmp_14_cast1_fu_223_p1.read().is_01() || !tmp_15_cast_fu_235_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_14_cast1_fu_223_p1.read()) + sc_biguint<18>(tmp_15_cast_fu_235_p1.read()));
}

void getPeakBinOf5::thread_tmp_13_cast1_fu_249_p1() {
    tmp_13_cast1_fu_249_p1 = esl_zext<18,16>(iEtSum_reg_365.read());
}

void getPeakBinOf5::thread_tmp_13_cast_fu_252_p1() {
    tmp_13_cast_fu_252_p1 = esl_zext<17,16>(iEtSum_reg_365.read());
}

void getPeakBinOf5::thread_tmp_13_fu_260_p2() {
    tmp_13_fu_260_p2 = (!tmp_13_cast1_fu_249_p1.read().is_01() || !tmp_12_reg_377.read().is_01())? sc_lv<1>(): (sc_biguint<18>(tmp_13_cast1_fu_249_p1.read()) > sc_biguint<18>(tmp_12_reg_377.read()));
}

void getPeakBinOf5::thread_tmp_14_cast1_fu_223_p1() {
    tmp_14_cast1_fu_223_p1 = esl_zext<18,16>(ap_port_reg_etSum.read());
}

void getPeakBinOf5::thread_tmp_14_fu_265_p3() {
    tmp_14_fu_265_p3 = esl_concat<16,2>(etSum_read_reg_359.read(), ap_const_lv2_0);
}

void getPeakBinOf5::thread_tmp_15_cast_fu_235_p1() {
    tmp_15_cast_fu_235_p1 = esl_zext<18,17>(tmp_10_fu_227_p3.read());
}

void getPeakBinOf5::thread_tmp_15_fu_272_p2() {
    tmp_15_fu_272_p2 = (!tmp_13_cast1_fu_249_p1.read().is_01() || !tmp_14_fu_265_p3.read().is_01())? sc_lv<1>(): (sc_biguint<18>(tmp_13_cast1_fu_249_p1.read()) > sc_biguint<18>(tmp_14_fu_265_p3.read()));
}

void getPeakBinOf5::thread_tmp_16_fu_126_p1() {
    tmp_16_fu_126_p1 = esl_zext<16,15>(tmp_1_fu_116_p4.read());
}

void getPeakBinOf5::thread_tmp_17_fu_164_p1() {
    tmp_17_fu_164_p1 = esl_zext<16,15>(tmp_3_fu_154_p4.read());
}

void getPeakBinOf5::thread_tmp_18_fu_168_p1() {
    tmp_18_fu_168_p1 = ap_port_reg_et_3_read.read().range(14-1, 0);
}

void getPeakBinOf5::thread_tmp_19_fu_172_p1() {
    tmp_19_fu_172_p1 = ap_port_reg_et_4_read.read().range(14-1, 0);
}

void getPeakBinOf5::thread_tmp_1_fu_116_p4() {
    tmp_1_fu_116_p4 = et_2_read.read().range(15, 1);
}

void getPeakBinOf5::thread_tmp_20_fu_209_p1() {
    tmp_20_fu_209_p1 = esl_zext<16,15>(tmp_4_reg_349.read());
}

void getPeakBinOf5::thread_tmp_2_fu_98_p1() {
    tmp_2_fu_98_p1 = esl_zext<16,15>(tmp_9_fu_88_p4.read());
}

void getPeakBinOf5::thread_tmp_3_fu_154_p4() {
    tmp_3_fu_154_p4 = ap_port_reg_et_3_read.read().range(15, 1);
}

void getPeakBinOf5::thread_tmp_5_fu_112_p1() {
    tmp_5_fu_112_p1 = esl_zext<16,15>(tmp_s_fu_102_p4.read());
}

void getPeakBinOf5::thread_tmp_6_fu_196_p2() {
    tmp_6_fu_196_p2 = (!tmp_8_fu_192_p2.read().is_01() || !tmp_17_fu_164_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_8_fu_192_p2.read()) - sc_biguint<16>(tmp_17_fu_164_p1.read()));
}

void getPeakBinOf5::thread_tmp_7_fu_245_p2() {
    tmp_7_fu_245_p2 = (!iEtSum_reg_365.read().is_01() || !etSum_read_reg_359.read().is_01())? sc_lv<1>(): (sc_biguint<16>(iEtSum_reg_365.read()) > sc_biguint<16>(etSum_read_reg_359.read()));
}

void getPeakBinOf5::thread_tmp_8_fu_192_p2() {
    tmp_8_fu_192_p2 = (!tmp8_reg_334.read().is_01() || !tmp9_reg_339.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp8_reg_334.read()) + sc_biguint<16>(tmp9_reg_339.read()));
}

void getPeakBinOf5::thread_tmp_9_fu_88_p4() {
    tmp_9_fu_88_p4 = et_0_read.read().range(15, 1);
}

void getPeakBinOf5::thread_tmp_fu_130_p2() {
    tmp_fu_130_p2 = (!ap_const_lv16_1.is_01())? sc_lv<16>(): et_2_read.read() << (unsigned short)ap_const_lv16_1.to_uint();
}

void getPeakBinOf5::thread_tmp_s_fu_102_p4() {
    tmp_s_fu_102_p4 = et_1_read.read().range(15, 1);
}

void getPeakBinOf5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

