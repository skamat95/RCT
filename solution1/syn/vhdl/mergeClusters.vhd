-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mergeClusters is
port (
    ieta1 : IN STD_LOGIC_VECTOR (15 downto 0);
    iphi1 : IN STD_LOGIC_VECTOR (15 downto 0);
    itet1 : IN STD_LOGIC_VECTOR (15 downto 0);
    icet1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ieta2 : IN STD_LOGIC_VECTOR (15 downto 0);
    iphi2 : IN STD_LOGIC_VECTOR (15 downto 0);
    itet2 : IN STD_LOGIC_VECTOR (15 downto 0);
    icet2 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mergeClusters is 
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal tmp_fu_72_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_102_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_120_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_132_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_96_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp5_fu_148_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp9_fu_164_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_180_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp3_fu_196_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp4_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_114_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp6_fu_228_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp7_fu_244_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal eta1_write_assign_fu_220_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi1_write_assign_fu_172_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tet1_write_assign_fu_140_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cet1_write_assign_fu_156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal eta2_write_assign_fu_188_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi2_write_assign_fu_204_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tet2_write_assign_fu_236_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal cet2_write_assign_fu_252_p3 : STD_LOGIC_VECTOR (15 downto 0);


begin



    ap_return_0 <= eta1_write_assign_fu_220_p3;
    ap_return_1 <= phi1_write_assign_fu_172_p3;
    ap_return_2 <= tet1_write_assign_fu_140_p3;
    ap_return_3 <= cet1_write_assign_fu_156_p3;
    ap_return_4 <= eta2_write_assign_fu_188_p3;
    ap_return_5 <= phi2_write_assign_fu_204_p3;
    ap_return_6 <= tet2_write_assign_fu_236_p3;
    ap_return_7 <= cet2_write_assign_fu_252_p3;
    cet1_write_assign_fu_156_p3 <= 
        sel_tmp5_fu_148_p3 when (or_cond_fu_84_p2(0) = '1') else 
        icet1;
    cet2_write_assign_fu_252_p3 <= 
        sel_tmp7_fu_244_p3 when (or_cond_fu_84_p2(0) = '1') else 
        icet2;
    eta1_write_assign_fu_220_p3 <= 
        sel_tmp4_fu_212_p3 when (or_cond_fu_84_p2(0) = '1') else 
        ieta1;
    eta2_write_assign_fu_188_p3 <= 
        sel_tmp2_fu_180_p3 when (or_cond_fu_84_p2(0) = '1') else 
        ieta2;
    or_cond_fu_84_p2 <= (tmp_fu_72_p2 or tmp_1_fu_78_p2);
    phi1_write_assign_fu_172_p3 <= 
        sel_tmp9_fu_164_p3 when (or_cond_fu_84_p2(0) = '1') else 
        iphi1;
    phi2_write_assign_fu_204_p3 <= 
        sel_tmp3_fu_196_p3 when (or_cond_fu_84_p2(0) = '1') else 
        iphi2;
    sel_tmp1_fu_132_p3 <= 
        tmp_4_fu_102_p2 when (sel_tmp_fu_126_p2(0) = '1') else 
        tmp_8_fu_120_p2;
    sel_tmp2_fu_180_p3 <= 
        ap_const_lv16_2 when (sel_tmp_fu_126_p2(0) = '1') else 
        ieta2;
    sel_tmp3_fu_196_p3 <= 
        ap_const_lv16_2 when (sel_tmp_fu_126_p2(0) = '1') else 
        iphi2;
    sel_tmp4_fu_212_p3 <= 
        ieta1 when (sel_tmp_fu_126_p2(0) = '1') else 
        ap_const_lv16_2;
    sel_tmp5_fu_148_p3 <= 
        tmp_3_fu_96_p2 when (sel_tmp_fu_126_p2(0) = '1') else 
        ap_const_lv16_0;
    sel_tmp6_fu_228_p3 <= 
        tmp_5_fu_108_p2 when (sel_tmp_fu_126_p2(0) = '1') else 
        tmp_7_fu_114_p2;
    sel_tmp7_fu_244_p3 <= 
        ap_const_lv16_0 when (sel_tmp_fu_126_p2(0) = '1') else 
        tmp_3_fu_96_p2;
    sel_tmp9_fu_164_p3 <= 
        iphi1 when (sel_tmp_fu_126_p2(0) = '1') else 
        ap_const_lv16_2;
    sel_tmp_fu_126_p2 <= (or_cond_fu_84_p2 and tmp_2_fu_90_p2);
    tet1_write_assign_fu_140_p3 <= 
        sel_tmp1_fu_132_p3 when (or_cond_fu_84_p2(0) = '1') else 
        itet1;
    tet2_write_assign_fu_236_p3 <= 
        sel_tmp6_fu_228_p3 when (or_cond_fu_84_p2(0) = '1') else 
        itet2;
    tmp_1_fu_78_p2 <= "1" when (iphi1 = iphi2) else "0";
    tmp_2_fu_90_p2 <= "1" when (unsigned(icet1) > unsigned(icet2)) else "0";
    tmp_3_fu_96_p2 <= std_logic_vector(unsigned(icet2) + unsigned(icet1));
    tmp_4_fu_102_p2 <= std_logic_vector(unsigned(icet2) + unsigned(itet1));
    tmp_5_fu_108_p2 <= std_logic_vector(unsigned(itet2) - unsigned(icet2));
    tmp_7_fu_114_p2 <= std_logic_vector(unsigned(itet2) + unsigned(icet1));
    tmp_8_fu_120_p2 <= std_logic_vector(unsigned(itet1) - unsigned(icet1));
    tmp_fu_72_p2 <= "1" when (ieta1 = ieta2) else "0";
end behav;
