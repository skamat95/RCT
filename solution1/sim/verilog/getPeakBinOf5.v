// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getPeakBinOf5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        et_0_read,
        et_1_read,
        et_2_read,
        et_3_read,
        et_4_read,
        etSum,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_state3 = 4'b100;
parameter    ap_ST_fsm_state4 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_1 = 3'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] et_0_read;
input  [15:0] et_1_read;
input  [15:0] et_2_read;
input  [15:0] et_3_read;
input  [15:0] et_4_read;
input  [15:0] etSum;
output  [2:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [15:0] tmp8_fu_136_p2;
reg   [15:0] tmp8_reg_334;
wire   [15:0] tmp9_fu_148_p2;
reg   [15:0] tmp9_reg_339;
wire   [13:0] tmp5_fu_176_p2;
reg   [13:0] tmp5_reg_344;
wire   [0:0] ap_CS_fsm_state2;
reg   [14:0] tmp_4_reg_349;
wire   [15:0] tmp_6_fu_196_p2;
reg   [15:0] tmp_6_reg_354;
reg   [15:0] etSum_read_reg_359;
wire   [0:0] ap_CS_fsm_state3;
wire   [15:0] iEtSum_fu_218_p2;
reg   [15:0] iEtSum_reg_365;
wire   [16:0] tmp_10_fu_227_p3;
reg   [16:0] tmp_10_reg_372;
wire   [17:0] tmp_12_fu_239_p2;
reg   [17:0] tmp_12_reg_377;
reg   [15:0] ap_port_reg_et_3_read;
reg   [15:0] ap_port_reg_et_4_read;
reg   [15:0] ap_port_reg_etSum;
wire   [14:0] tmp_9_fu_88_p4;
wire   [14:0] tmp_s_fu_102_p4;
wire   [14:0] tmp_1_fu_116_p4;
wire   [15:0] tmp_2_fu_98_p1;
wire   [15:0] tmp_fu_130_p2;
wire   [15:0] tmp_16_fu_126_p1;
wire   [15:0] tmp_5_fu_112_p1;
wire   [15:0] tmp2_fu_142_p2;
wire   [14:0] tmp_3_fu_154_p4;
wire   [13:0] tmp_19_fu_172_p1;
wire   [13:0] tmp_18_fu_168_p1;
wire   [15:0] tmp_8_fu_192_p2;
wire   [15:0] tmp_17_fu_164_p1;
wire   [15:0] tmp1_fu_202_p3;
wire   [15:0] tmp_20_fu_209_p1;
wire   [15:0] tmp3_fu_212_p2;
wire   [17:0] tmp_14_cast1_fu_223_p1;
wire   [17:0] tmp_15_cast_fu_235_p1;
wire   [0:0] ap_CS_fsm_state4;
wire   [16:0] tmp_13_cast_fu_252_p1;
wire   [17:0] tmp_13_cast1_fu_249_p1;
wire   [17:0] tmp_14_fu_265_p3;
wire   [0:0] tmp_15_fu_272_p2;
wire   [0:0] tmp_11_fu_255_p2;
wire   [0:0] tmp_13_fu_260_p2;
wire   [0:0] tmp4_fu_286_p2;
wire   [0:0] tmp_7_fu_245_p2;
wire   [0:0] sel_tmp1_fu_292_p2;
wire   [2:0] iAve_fu_278_p3;
wire   [2:0] sel_tmp2_fu_298_p3;
wire   [0:0] sel_tmp5_fu_314_p2;
wire   [0:0] sel_tmp6_fu_320_p2;
wire   [2:0] sel_tmp4_fu_306_p3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ap_port_reg_etSum <= etSum;
        ap_port_reg_et_3_read <= et_3_read;
        ap_port_reg_et_4_read <= et_4_read;
        tmp8_reg_334 <= tmp8_fu_136_p2;
        tmp9_reg_339 <= tmp9_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        etSum_read_reg_359 <= ap_port_reg_etSum;
        iEtSum_reg_365 <= iEtSum_fu_218_p2;
        tmp_10_reg_372[16 : 1] <= tmp_10_fu_227_p3[16 : 1];
        tmp_12_reg_377 <= tmp_12_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp5_reg_344 <= tmp5_fu_176_p2;
        tmp_4_reg_349 <= {{ap_port_reg_et_4_read[ap_const_lv32_F : ap_const_lv32_1]}};
        tmp_6_reg_354 <= tmp_6_fu_196_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_return = ((sel_tmp6_fu_320_p2[0:0] === 1'b1) ? ap_const_lv3_1 : sel_tmp4_fu_306_p3);

assign iAve_fu_278_p3 = ((tmp_15_fu_272_p2[0:0] === 1'b1) ? ap_const_lv3_4 : ap_const_lv3_3);

assign iEtSum_fu_218_p2 = (tmp_6_reg_354 + tmp3_fu_212_p2);

assign sel_tmp1_fu_292_p2 = (tmp4_fu_286_p2 & tmp_7_fu_245_p2);

assign sel_tmp2_fu_298_p3 = ((sel_tmp1_fu_292_p2[0:0] === 1'b1) ? iAve_fu_278_p3 : ap_const_lv3_2);

assign sel_tmp4_fu_306_p3 = ((tmp_7_fu_245_p2[0:0] === 1'b1) ? sel_tmp2_fu_298_p3 : ap_const_lv3_0);

assign sel_tmp5_fu_314_p2 = (tmp_11_fu_255_p2 ^ 1'b1);

assign sel_tmp6_fu_320_p2 = (tmp_7_fu_245_p2 & sel_tmp5_fu_314_p2);

assign tmp1_fu_202_p3 = {{tmp5_reg_344}, {ap_const_lv2_0}};

assign tmp2_fu_142_p2 = (tmp_fu_130_p2 + tmp_16_fu_126_p1);

assign tmp3_fu_212_p2 = (tmp1_fu_202_p3 + tmp_20_fu_209_p1);

assign tmp4_fu_286_p2 = (tmp_11_fu_255_p2 & tmp_13_fu_260_p2);

assign tmp5_fu_176_p2 = (tmp_19_fu_172_p1 + tmp_18_fu_168_p1);

assign tmp8_fu_136_p2 = (tmp_2_fu_98_p1 + et_1_read);

assign tmp9_fu_148_p2 = (tmp_5_fu_112_p1 + tmp2_fu_142_p2);

assign tmp_10_fu_227_p3 = {{ap_port_reg_etSum}, {1'b0}};

assign tmp_11_fu_255_p2 = ((tmp_13_cast_fu_252_p1 > tmp_10_reg_372) ? 1'b1 : 1'b0);

assign tmp_12_fu_239_p2 = (tmp_14_cast1_fu_223_p1 + tmp_15_cast_fu_235_p1);

assign tmp_13_cast1_fu_249_p1 = iEtSum_reg_365;

assign tmp_13_cast_fu_252_p1 = iEtSum_reg_365;

assign tmp_13_fu_260_p2 = ((tmp_13_cast1_fu_249_p1 > tmp_12_reg_377) ? 1'b1 : 1'b0);

assign tmp_14_cast1_fu_223_p1 = ap_port_reg_etSum;

assign tmp_14_fu_265_p3 = {{etSum_read_reg_359}, {ap_const_lv2_0}};

assign tmp_15_cast_fu_235_p1 = tmp_10_fu_227_p3;

assign tmp_15_fu_272_p2 = ((tmp_13_cast1_fu_249_p1 > tmp_14_fu_265_p3) ? 1'b1 : 1'b0);

assign tmp_16_fu_126_p1 = tmp_1_fu_116_p4;

assign tmp_17_fu_164_p1 = tmp_3_fu_154_p4;

assign tmp_18_fu_168_p1 = ap_port_reg_et_3_read[13:0];

assign tmp_19_fu_172_p1 = ap_port_reg_et_4_read[13:0];

assign tmp_1_fu_116_p4 = {{et_2_read[ap_const_lv32_F : ap_const_lv32_1]}};

assign tmp_20_fu_209_p1 = tmp_4_reg_349;

assign tmp_2_fu_98_p1 = tmp_9_fu_88_p4;

assign tmp_3_fu_154_p4 = {{ap_port_reg_et_3_read[ap_const_lv32_F : ap_const_lv32_1]}};

assign tmp_5_fu_112_p1 = tmp_s_fu_102_p4;

assign tmp_6_fu_196_p2 = (tmp_8_fu_192_p2 - tmp_17_fu_164_p1);

assign tmp_7_fu_245_p2 = ((iEtSum_reg_365 > etSum_read_reg_359) ? 1'b1 : 1'b0);

assign tmp_8_fu_192_p2 = (tmp8_reg_334 + tmp9_reg_339);

assign tmp_9_fu_88_p4 = {{et_0_read[ap_const_lv32_F : ap_const_lv32_1]}};

assign tmp_fu_130_p2 = et_2_read << ap_const_lv16_1;

assign tmp_s_fu_102_p4 = {{et_1_read[ap_const_lv32_F : ap_const_lv32_1]}};

always @ (posedge ap_clk) begin
    tmp_10_reg_372[0] <= 1'b0;
end

endmodule //getPeakBinOf5
